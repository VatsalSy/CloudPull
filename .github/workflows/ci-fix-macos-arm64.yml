name: CI - Cross-Platform with macOS ARM64

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.55.2'
  GOSEC_VERSION: 'latest'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --config=.golangci.yml --timeout=5m

      - name: Run go fmt check
        run: |
          if [ -n "$(gofmt -s -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -s -d .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  security:
    name: Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

      - name: Run go mod audit
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.21', '1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go == env.GO_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          # Native builds (faster)
          - os: ubuntu-latest
            arch: amd64
            native: true
          - os: ubuntu-latest
            arch: arm64
            native: false
          - os: macos-latest
            arch: amd64
            native: true
          # macOS arm64 build on x86_64 runner using cross-compilation
          - os: macos-latest
            arch: arm64
            native: false
          - os: windows-latest
            arch: amd64
            native: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Set build environment
        id: build-env
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "goos=windows" >> $GITHUB_OUTPUT
            echo "ext=.exe" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "goos=darwin" >> $GITHUB_OUTPUT
            echo "ext=" >> $GITHUB_OUTPUT
          else
            echo "goos=linux" >> $GITHUB_OUTPUT
            echo "ext=" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        env:
          GOOS: ${{ steps.build-env.outputs.goos }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1  # Required for sqlite3
        run: |
          # For cross-compilation on macOS, we need to set proper flags
          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "arm64" && "${{ matrix.native }}" == "false" ]]; then
            # Cross-compile from x86_64 to arm64 on macOS
            export CC="clang -target arm64-apple-darwin"
            export CXX="clang++ -target arm64-apple-darwin"
          fi
          
          go build -v -o cloudpull-${{ runner.os }}-${{ matrix.arch }}${{ steps.build-env.outputs.ext }} ./cmd/cloudpull

      - name: Test binary
        # Only test native builds (can't run arm64 binaries on x86_64)
        if: matrix.native == true
        run: |
          ./cloudpull-${{ runner.os }}-${{ matrix.arch }}${{ steps.build-env.outputs.ext }} --version

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cloudpull-${{ runner.os }}-${{ matrix.arch }}
          path: cloudpull-${{ runner.os }}-${{ matrix.arch }}${{ steps.build-env.outputs.ext }}

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, test, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run integration tests
        run: |
          go test -v -run Integration -tags=integration ./...

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: cloudpull:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  check-docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check markdown files
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          globs: |
            **/*.md
            !vendor/**/*.md
            !node_modules/**/*.md

      - name: Check for broken links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress './**/*.md' './**/*.go' --exclude-mail
          fail: true

  dependabot-auto-merge:
    name: Dependabot Auto-merge
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    needs: [lint, security, test, build]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2

      - name: Auto-merge minor and patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
